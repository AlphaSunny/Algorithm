-------------------------------------------序列类容器---------------------------------------

1.vector
在内存中分配一块连续的内存空间进行存储。支持不指定vector大小的存储。STL内部实现时，首先分配一个非常大的内存空间预备进行存储，即capacity（）函数返回的大小，当超过此分配的空间时再整体重新放分配一块内存存储，这给人以vector可以不指定vector即一个连续内存的大小的感觉。通常此默认的内存分配能完成大部分情况下的存储。

   优点：(1) 不指定一块内存大小的数组的连续存储，即可以像数组一样操作，但可以对此数组进行动态操作。通常体现在push_back() pop_back()

         (2) 随机访问方便，即支持[ ]操作符和vector.at()

         (3) 节省空间。

   缺点：(1) 在内部进行插入删除操作效率低。

         (2) 只能在vector的最后进行push和pop，不能在vector的头进行push和pop。

         (3) 当动态添加的数据超过vector默认分配的大小时要进行整体的重新分配、拷贝与释放


3.list
 每一个结点都包括一个信息快Info、一个前驱指针Pre、一个后驱指针Post。可以不分配必须的内存大小方便的进行添加和删除操作。使用的是非连续的内存空间进行存储。

   优点：(1) 不使用连续内存完成动态操作。

        (2) 在内部方便的进行插入和删除操作

        (3) 可在两端进行push、pop

   缺点：(1) 不能进行内部的随机访问，即不支持[ ]操作符和vector.at()

         (2) 相对于verctor占用内存多

使用区别：

     1）如果你需要高效的随即存取，而不在乎插入和删除的效率，使用vector

     2）如果你需要大量的插入和删除，而不关心随机存取，则应使用list

     3）如果你需要随机存取，而且关心两端数据的插入和删除，则应使用deque


-----------------------------------关联式容器-------------------------------------------
 是一种非线性的树结构，具体的说采用的是一种比较高效的特殊的平衡检索二叉树―― 红黑树结构。

因为关联容器的这四种容器类都使用同一原理，所以他们核心的算法是一致的，但是它们在应用上又有一些差别，先描述一下它们之间的差别。

1. set ，又称集合，实际上就是一组元素的集合，但其中所包含的元素的值是唯一的，且是按一定顺序排列的，集合中的每个元素被称作集合中的实例。因为其内部是通过链表的方式来组织，所以在插入的时候比vector 快，但在查找和末尾添加上被vector 慢。

2.multiset ，是多重集合，其实现方式和set 是相似的，只是它不要求集合中的元素是唯一的，也就是说集合中的同一个元素可以出现多次。

3.map ，提供一种“键- 值”关系的一对一的数据存储能力。其“键”在容器中不可重复，且按一定顺序排列（其实我们可以将set 也看成是一种键- 值关系的存储，只是它只有键没有值。它是map 的一种特殊形式）。由于其是按链表的方式存储，它也继承了链表的优缺点。

4.multimap ， 和map 的原理基本相似，它允许“键”在容器中可以不唯一。

关联容器的特点是明显的，相对于顺序容器，有以下几个主要特点：

1， 其内部实现是采用非线性的二叉树结构，具体的说是红黑树的结构原理实现的；

2， set 和map 保证了元素的唯一性，mulset 和mulmap 扩展了这一属性，可以允许元素不唯一；

3， 元素是有序的集合，默认在插入的时候按升序排列。

基于以上特点，

1， 关联容器对元素的插入和删除操作比vector 要快，因为vector 是顺序存储，而关联容器是链式存储；比list 要慢，是因为即使它们同是链式结构，但list 是线性的，而关联容器是二叉树结构，其改变一个元素涉及到其它元素的变动比list 要多，并且它是排序的，每次插入和删除都需要对元素重新排序；

2， 关联容器对元素的检索操作比vector 慢，但是比list 要快很多。vector 是顺序的连续存储，当然是比不上的，但相对链式的list 要快很多是因为list 是逐个搜索，它搜索的时间是跟容器的大小成正比，而关联容器 查找的复杂度基本是Log(N) ，比如如果有1000 个记录，最多查找10 次，1,000,000 个记录，最多查找20 次。容器越大，关联容器相对list 的优越性就越能体现；

3， 在使用上set 区别于vector,deque,list 的最大特点就是set 是内部排序的，这在查询上虽然逊色于vector ，但是却大大的强于list 。

4， 在使用上map 的功能是不可取代的，它保存了“键- 值”关系的数据，而这种键值关系采用了类数组的方式。数组是用数字类型的下标来索引元素的位置，而map 是用字符型关键字来索引元素的位置。在使用上map 也提供了一种类数组操作的方式，即它可以通过下标来检索数据，这是其他容器做不到的，当然也包括set 。



----------------------------------适配器-------------------------------------------------
1.stack 后进先出

2.queue 先进先出

3.priority_queue 最高优先级元素总是第一个出列 相当于一个二叉堆，优先级最高的先出


-------------------------------------其他--------------------------------------------

1.forward_list
 Forward_list是一种能在常数时间内在任何位置插入和删除的顺序容器。Forward_list是单向链表。

         Forward_list和list的区别在于前者是单向链表，在内部元素只有一个链接到下一个元素，它的迭代器是前向有效的；后者是双向链表，在内部存在两个链接，一个链接指向下一个元素，另一个链接指向前面一个元素，它的迭代器是双向有效地，在存储方面list会消耗更多的空间，插入和删除元素会稍微消耗更多的时间。Forward_list的迭代器是虽然是单向的，但是它比list效率高。

         Forward_list与其他标准容器(array、deque、vector)相比较，在容器的任何位置插入、提取、移动元素的效率更高。但是根据位置直接访问元素的操作其他几个容器效率更高。
 